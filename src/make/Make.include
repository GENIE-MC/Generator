#
# Make.include for GENIE Object-Oriented Neutrino Generator
#
# Costas Andreopoulos (Rutherford Lab.) <costas.andreopoulos \at stfc.ac.uk>
#

#-------------------------------------------------------------------
# Read in configure script output
#-------------------------------------------------------------------
# Include file generated by the configure script
# Type './configure --help' for more information

include $(GENIE)/src/make/Make.config

ifndef GOPT_WITH_CXX_USERDEF_FLAGS
 GOPT_WITH_CXX_USERDEF_FLAGS=
endif

#-------------------------------------------------------------------
# Architecture
#-------------------------------------------------------------------
# As defined by ROOT
ARCH      = $(shell root-config --arch)
ARCH_OK   =
IS_MACOSX =

#-------------------------------------------------------------------
# GENIE
#-------------------------------------------------------------------

# GENIE release info
#
GVERSION  = $(shell awk '{print $0}' $(GENIE)/VERSION)

# GENIE paths
#
GENIE_LIB_PATH    := $(GENIE)/lib
GENIE_BIN_PATH    := $(GENIE)/bin
GENIE_SRC_PATH    := $(GENIE)/src
GENIE_CONFIG_PATH := $(GENIE)/config

# GENIE installation paths used with 'make install'
# The $GENIE_INSTALLATION_PATH is determined from ./configure --prefix=...
#
GENIE_LIB_INSTALLATION_PATH     := $(GENIE_INSTALLATION_PATH)/lib
GENIE_BIN_INSTALLATION_PATH     := $(GENIE_INSTALLATION_PATH)/bin
GENIE_INCBASE_INSTALLATION_PATH := $(GENIE_INSTALLATION_PATH)/include
GENIE_INC_INSTALLATION_PATH     := $(GENIE_INCBASE_INSTALLATION_PATH)/GENIE

# GENIE header files base dir
#
GENIE_INCLUDES := -I$(GENIE)/src/

# The following will be appended in the library name
#
GLIBVERSION =
ifeq ($(strip $(GOPT_ENABLE_DYLIBVERSION)),YES)
  GLIBVERSION = -$(GVERSION)
endif

# Look for traces of a previous installation at the specified
# installation location
#
ifeq ($(shell ls $(GENIE_INC_INSTALLATION_PATH) 2>/dev/null ),)
  GENIE_PREVIOUS_INSTALLATION = NO
else
  GENIE_PREVIOUS_INSTALLATION = YES
endif

#-------------------------------------------------------------------
# libxml2
#-------------------------------------------------------------------

# XML lib & include directories

ifdef GOPT_WITH_LIBXML2_INC
XML_INC_DIR = $(GOPT_WITH_LIBXML2_INC)
else
XML_INC_DIR = /usr/include/libxml2
endif

ifdef GOPT_WITH_LIBXML2_LIB
XML_LIB_DIR = $(GOPT_WITH_LIBXML2_LIB)
else
XML_LIB_DIR = /usr/lib
endif

# XML libraries and headers

XML_INCLUDES  := -I$(XML_INC_DIR)
XML_LIBRARIES := -L$(XML_LIB_DIR) -lxml2

#-------------------------------------------------------------------
# log4cpp
#-------------------------------------------------------------------

# log4cpp lib & include directory

ifdef GOPT_WITH_LOG4CPP_INC
LOG_INC_DIR = $(GOPT_WITH_LOG4CPP_INC)
else
LOG_INC_DIR = /usr/local/src/log4cpp/include
endif

ifdef GOPT_WITH_LOG4CPP_LIB
LOG_LIB_DIR = $(GOPT_WITH_LOG4CPP_LIB)
else
LOG_LIB_DIR = /usr/local/lib
endif

# log4cpp libraries and headers

LOG_INCLUDES  := -I$(LOG_INC_DIR)
LOG_LIBRARIES := -L$(LOG_LIB_DIR) -llog4cpp

#-------------------------------------------------------------------
# gsl
#-------------------------------------------------------------------

# gsl libraries and headers

GSL_INCLUDES  := $(shell gsl-config --cflags)
GSL_LIBRARIES := $(shell gsl-config --libs)

#-------------------------------------------------------------------
# libfortran and/or libg2c
#-------------------------------------------------------------------

FORT_LIBRARIES =

ifeq ($(strip $(GOPT_ENABLE_G2C)),YES)
FORT_LIBRARIES = -L$(GOPT_WITH_G2C_LIB) -lg2c
endif

ifeq ($(strip $(GOPT_ENABLE_GFORTRAN)),YES)
FORT_LIBRARIES = -L$(GOPT_WITH_GFORTRAN_LIB) -lgfortran
endif

#-------------------------------------------------------------------
# LHAPDF5/6
#-------------------------------------------------------------------

LHAPDF_LIBRARIES =
LHAPDF_INCLUDES  =

ifeq ($(strip $(GOPT_ENABLE_LHAPDF6)),YES)
LHAPDF_INCLUDES  += -I$(GOPT_WITH_LHAPDF6_INC)
LHAPDF_LIBRARIES += -L$(GOPT_WITH_LHAPDF6_LIB) -lLHAPDF
endif

ifeq ($(strip $(GOPT_ENABLE_LHAPDF5)),YES)
LHAPDF_INCLUDES  += -I$(GOPT_WITH_LHAPDF5_INC)
LHAPDF_LIBRARIES += -L$(GOPT_WITH_LHAPDF5_LIB) -lLHAPDF $(FORT_LIBRARIES)
endif

#-------------------------------------------------------------------
# PYTHIA6
#-------------------------------------------------------------------

PYTHIA6_DIR = $(GOPT_WITH_PYTHIA6_LIB)
PYTHIA6_O   = $(wildcard $(PYTHIA6_DIR)/pythia*.o) # match all vrs

PYTHIA6_LIBRARIES = -L$(PYTHIA6_DIR) -lPythia6 $(PYTHIA6_O)

ifeq ($(strip $(ARCH)),macosx)
PYTHIA6_LIBRARIES  = -L$(PYTHIA6_DIR) -lPythia6
endif

#-------------------------------------------------------------------
# PYTHIA8
#-------------------------------------------------------------------

PYTHIA8_INCLUDES  =
PYTHIA8_LIBRARIES =

ifeq ($(strip $(GOPT_ENABLE_PYTHIA8)),YES)
PYTHIA8_INCLUDES  += -I$(GOPT_WITH_PYTHIA8_INC)
PYTHIA8_LIBRARIES += -L$(GOPT_WITH_PYTHIA8_LIB) -lpythia8
endif

#-------------------------------------------------------------------
# ROOT
#-------------------------------------------------------------------
# ROOT headers and libraries
ROOT_FLAGS     = $(shell root-config --cflags)
ROOT_INCLUDES  = -I$(shell root-config --incdir)
ROOT_LIBRARIES = $(shell root-config --glibs) \
                        -lMinuit -lGeom -lEG -lEGPythia6 -lGenVector -lMathMore
ROOT_VERSION = $(shell root-config --version )
ROOT_MAJOR   = $(shell root-config --version | cut -d. -f1 )

#-------------------------------------------------------------------
# PROFILING / DEBUGING OPTIONS
#-------------------------------------------------------------------
# Linking in the Google Profiling Tool library
#
GPROF_LIBRARIES =
ifeq ($(strip $(GOPT_ENABLE_PROFILER)),YES)
  ifdef GOPT_WITH_PROFILER_LIB
    GPROF_LIBRARIES += -L$(GOPT_WITH_PROFILER_LIB) -lprofiler
  else
    GPROF_LIBRARIES += -L/usr/local/lib -lprofiler
  endif
endif

#-------------------------------------------------------------------
# DOXYGEN
#-------------------------------------------------------------------
# if doc was enabled but DOXYGEN was not set, try a default
#
ifdef GOPT_ENABLE_DOXYGEN_DOC
  ifdef GOPT_WITH_DOXYGEN_PATH
    DOXYGEN=$(GOPT_WITH_DOXYGEN_PATH)/doxygen
  else
    DOXYGEN=doxygen
  endif
endif

#-------------------------------------------------------------------
# Some global variables
#-------------------------------------------------------------------
MAKE   := make
RM      = rm -f
MKDIR   = mkdir -p
CAT     = cat
SYMLINK = ln -sf
COPY    = cp
INSTALL = @INSTALL@

# AR, ARFLAGS and RANLIB are for manipulating an archive
AR        = ar
ARFLAGS   = rv
RANLIB    = ranlib

#-------------------------------------------------------------------
# COMPILER OPTIONS
#-------------------------------------------------------------------

ifeq ($(GOPT_WITH_COMPILER),$(filter $(GOPT_WITH_COMPILER),clang clang++))
  # --clang
  CXX           = clang++
  CC            = clang
  LD            = clang++
else
  ifeq ($(GOPT_WITH_COMPILER),$(filter $(GOPT_WITH_COMPILER),gcc g++))
    # -- gcc
    CXX = g++
    CC  = gcc
    LD  = g++
  else
    $(error GOPT_WITH_COMPILER not set correctly!)
  endif
endif
#check if we're using clang (complicated because g++ is sometimes a clang alias...)
APPLE_CLANG := $(shell $(CXX) -v 2>&1 | sed -n "s/.*clang//p" | cut -d . -f 1)
ifneq ($(APPLE_CLANG),)
USING_CLANG  = YES
endif

# get gcc version & split in '.' delimited tokens (major/minor/revison num.)
CXXVRS      = $(shell $(CXX) -dumpversion)
CXXVRS_MAJ  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[1]}')
CXXVRS_MIN  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[2]}')
CXXVRS_REV  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[3]}')

ifeq ($(CXXVRS_MIN),)
  CXXVRS_MIN = 0
endif

# gcc version >= 4.1.0 ?
GCC_GE_4_1_0  = $(shell awk 'BEGIN {\
		if($(CXXVRS_MAJ)>=4 && $(CXXVRS_MIN)>0) print "YES"}')


# MAC OS X with gcc or clang, 32-bit mode
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx)
ARCH_OK       = YES
IS_MACOSX     = YES
CXXFLAGS      = -pipe -W -Wall -Wno-long-double -fsigned-char -fno-common \
		$(ROOT_FLAGS) \
		$(OPT_WITH_CXX_DEBUG_FLAG) \
		$(OPT_WITH_CXX_OPTIMIZ_FLAG) \
		$(OPT_WITH_CXX_USERDEF_FLAGS)
ifeq ($(strip $(GCC_GE_4_1_0)), YES)
  CXXFLAGS += -Wno-strict-aliasing
endif
ifneq ($(USING_CLANG), YES)
  CXXFLAGS += -flat_namespace
endif
LDFLAGS       = -bind_at_load
SOFLAGS       = -dynamiclib -flat_namespace -single_module -undefined dynamic_lookup
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     =
endif


#ifeq ($(strip $(ARCH)),macosx)
#ARCH_OK       = YES
#IS_MACOSX     = YES
#CXXFLAGS      = -pipe -W -Wall -Wno-long-double \
#		-fsigned-char -fno-common -flat_namespace \#
#		$(GOPT_WITH_CXX_DEBUG_FLAG) \
#		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
#		$(GOPT_WITH_CXX_USERDEF_FLAGS)
#ifeq ($(strip $(GCC_GE_4_1_0)), YES)
#  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
#endif
#LDFLAGS       = -bind_at_load
#SOFLAGS       = -dynamiclib -flat_namespace \
#		-single_module -undefined dynamic_lookup
#DllSuf       := dylib
#DllLinkSuf   := so
#StaticLibSuf := a
#ObjSuf       := o
#SrcSuf       := cxx
#FORT         := g77
#FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
#RANLIB       := ranlib
#SOCMD         = $(LD)
#OutPutOpt     = -o
#SOMINF        =
#EXTRALIBS     =
#endif

# MAC OS X with gcc or clang, 64-bit mode
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx64)
OSX_VERSION = $(shell sw_vers | grep 'ProductVersion:' | grep -o '[0-9]*\.[0-9]*\.[0-9]*')
OSXVRS_MAJ  = $(shell awk 'BEGIN {\
		str="$(OSX_VERSION)"; split(str, tk, "."); print tk[1]}')
OSXVRS_MIN  = $(shell awk 'BEGIN {\
		str="$(OSX_VERSION)"; split(str, tk, "."); print tk[2]}')
OSXVRS_REV  = $(shell awk 'BEGIN {\
		str="$(OSX_VERSION)"; split(str, tk, "."); print tk[3]}')
# osx version >= 10.6 ?
OSX_GE_10_6_0  = $(shell awk 'BEGIN {\
		if($(OSXVRS_MAJ)>=10 && $(OSXVRS_MIN)>=6) print "YES"}')
# osx version >= 10.9 ?
OSX_GE_10_9_0  = $(shell awk 'BEGIN {\
		if($(OSXVRS_MAJ)>=10 && $(OSXVRS_MIN)>=9) print "YES"}')
ARCH_OK       = YES
IS_MACOSX     = YES
IS_MACOSX     = YES
CXXFLAGS      = -m64 -pipe -Wshadow -W -Wall -Woverloaded-virtual \
                -fsigned-char -fno-common \
                $(ROOT_FLAGS) \
                $(OPT_WITH_CXX_DEBUG_FLAG) \
                $(OPT_WITH_CXX_OPTIMIZ_FLAG) \
                $(OPT_WITH_CXX_USERDEF_FLAGS)
ifneq ($(strip $(GCC_GE_4_2_1)), YES)
  ifneq ($(USING_CLANG), YES)
    CXXFLAGS   += -flat_namespace
  endif
endif
ifeq ($(GCC_GE_4_1_0),YES)
  ifeq ($(USING_CLANG),YES)
    ifeq ($(OSX_GE_10_9_0),YES)
	CXXFLAGS += -stdlib=libc++ -mmacosx-version-min=10.9
    else
      ifeq ($(OSX_GE_10_6_0),YES)
	CXXFLAGS += -stdlib=libstdc++ -mmacosx-version-min=10.6
      endif
    endif
  endif
  CXXFLAGS += -Wno-strict-aliasing
endif
LDFLAGS       = -bind_at_load
SOFLAGS       = -dynamiclib -flat_namespace \
                -single_module -undefined dynamic_lookup
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     =
endif

#ifeq ($(strip $(ARCH)),macosx64)
#ARCH_OK       = YES
#IS_MACOSX     = YES
#CXXFLAGS      = -m64 -pipe -W -Wall \
#		-fsigned-char -fno-common -flat_namespace \
#		$(GOPT_WITH_CXX_DEBUG_FLAG) \
#		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
#		$(GOPT_WITH_CXX_USERDEF_FLAGS)
#ifeq ($(strip $(GCC_GE_4_1_0)), YES)
#  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
#endif
#LDFLAGS       = -bind_at_load
#SOFLAGS       = -dynamiclib -flat_namespace \
#		-single_module -undefined dynamic_lookup
#DllSuf       := dylib
#DllLinkSuf   := so
#StaticLibSuf := a
#ObjSuf       := o
#SrcSuf       := cxx
#FORT         := g77
#FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
#RANLIB       := ranlib
#SOCMD         = $(LD)
#OutPutOpt     = -o
#SOMINF        =
#EXTRALIBS     =
#endif

# LINUX / 32-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linux)
ARCH_OK       = YES
CXXFLAGS      = -W -Wall -fPIC -Wshadow \
		$(ROOT_FLAGS) \
		$(GOPT_WITH_CXX_DEBUG_FLAG) \
		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
		$(GOPT_WITH_CXX_USERDEF_FLAGS)
ifeq ($(strip $(GCC_GE_4_1_0)), YES)
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g -Wl,--no-as-needed -Wl,--no-undefined
SOFLAGS       = -shared
DllSuf       := so
DllLinkSuf   :=
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     = -lnsl
endif

# LINUX / 64-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linuxx8664gcc)
ARCH_OK       = YES
CXXFLAGS      = -W -Wall -fPIC -Wshadow \
		$(ROOT_FLAGS) \
		$(GOPT_WITH_CXX_DEBUG_FLAG) \
		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
		$(GOPT_WITH_CXX_USERDEF_FLAGS)
ifeq ($(strip $(GCC_GE_4_1_0)), YES)
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g -Wl,--no-as-needed -Wl,--no-undefined
SOFLAGS       = -shared
DllSuf       := so
DllLinkSuf   :=
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     = -lnsl
endif

#-------------------------------------------------------------------
# SUMMING-UP
#-------------------------------------------------------------------

# includes and libraries needed to compile programs.

CPP_INCLUDES := \
    $(LINUX_SYS_INCLUDES) \
    $(XML_INCLUDES) \
    $(LOG_INCLUDES) \
    $(ROOT_INCLUDES) \
    $(LHAPDF_INCLUDES) \
    $(GSL_INCLUDES) \
    $(GENIE_INCLUDES)

ROOT_DICT_GEN_INCLUDES := \
    $(LINUX_SYS_INCLUDES) \
    $(XML_INCLUDES) \
    $(LOG_INCLUDES) \
    $(ROOT_INCLUDES) \
    $(GENIE_INCLUDES)

LIBRARIES := $(SYSLIBS) \
             $(FORT_LIBRARIES) \
             $(ROOT_LIBRARIES) \
             $(PYTHIA6_LIBRARIES) \
             $(LHAPDF_LIBRARIES) \
             $(XML_LIBRARIES) \
             $(LOG_LIBRARIES) \
             $(GSL_LIBRARIES) \
             $(GPROF_LIBRARIES) \
             $(EXTRALIBS)

# Default compiler and preprocessor flags

CXXFLAGS := $(ENV_CXXFLAGS) $(CXXFLAGS)
CPPFLAGS  = $(CPP_INCLUDES)
CCFLAGS   = $(ROOT_DICT_GEN_INCLUDES)
CFLAGS    = -g

#-------------------------------------------------------------------
# MAKE RULES
#-------------------------------------------------------------------

.SUFFIXES : .inc .cxx

#.cc.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CCFLAGS) $<

#.cxx.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CCFLAGS) $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.C.o:
	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.c.o:
	$(CC) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.F.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.f.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.F.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o

.f.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o

print-%  : ; @echo $* = $($*)
